Hibernate
SessionFactory

Поточно-ориентированное (и неизменное) представление сопоставления модели предметной области приложения с базой данных.
Действует как фабрика для экземпляров org.hibernate.Session.
EntityManagerFactory — это Jakarta Persistence, эквивалентный SessionFactory, и в основном эти два сходятся в одной и той же реализации SessionFactory.

Создание SessionFactory обходится очень дорого, поэтому для любой конкретной базы данных приложение должно иметь только одну связанную SessionFactory.
SessionFactory поддерживает службы, которые Hibernate использует во всех сеансах, такие как кэши второго уровня, пулы соединений, интеграция системы транзакций и т. д.

Добавление конфигурационного файла:
Меню File : выбрать пункт ProjectStructure, выбрать пункт Modules, во второй колонке в меню выбрать "+" (Add),
выбрать модуль Hibernate. В третьей колонке "+" (Add) hibernate.cfg.xml
по пути /home/user/IdeaProjects/PP-1_1_4/src/main/resources/hibernate.cfg.xml

==============================================================================
?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
    <property name="connection.url">jdbc:mysql://localhost:3306/dbTaskJDBC</property>
    <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
    <property name="connection.username">root</property>
    <property name="connection.password">root</property>
    <property name="connection.dialect">org.hibernate.dialect.MySQLDialect</property>

    <!-- DB schema will be updated if needed -->
    <!-- <property name="hibernate.hbm2ddl.auto">update</property> -->
  </session-factory>
</hibernate-configuration>
========================================================================

Создание SessionFactory

Configuration configuration = new Configuration();
//получаем путь к файлу настроек
configuration.configure();
//по умолчанию директория resources помеченная как Resources Root или
configuration.configure("pathTo/hibernate.cfg.xml");
//получаем SessionFactory из configuration . sessionFactory нужно закрывать
try (SessionFactory sessionFactory = configuration.buildSessionFactory()) {}


Session (org.hibernate.Session)

Однопоточный недолговечный объект, концептуально моделирующий «единицу работы» (PoEAA).
В номенклатуре Jakarta Persistence сеанс представлен EntityManager.
За кулисами сеанс Hibernate оборачивает JDBC java.sql.Connection и действует как фабрика для экземпляров org.hibernate.

Получение Session

Session session = sessionFactory.openSession();


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JDBC
https://javarush.ru/groups/posts/2251-znakomstvo-s-maven-spring-mysql-hibernate-i-pervoe-crud-prilozhenie-chastjh-3
Создание базы данных: dbTaskJDBC
user: root
password: root
url: jdbc:mysql://localhost:3306/dbTaskJDBC
driver: com.mysql.cj.jdbc.Driver

Конфигурационные файлы, Файлы свойств (Properties Files)
Properties Files - предназначены, для того чтобы хранить в них статические данные необходимые project.
Создать Property-file database.properties.
Записать в него данные в формате: Ключ = значение.
Ключ(key) это уникальное имя, по которому можно получить доступ к значению, хранимому под этим ключом.
Значение(value) это текст|число, необходимое для выполнения определённой логики в вашей программе.
Создаем входной поток (inputStream) type: FileInputStream|InputStream для чтения данных(data) from database.properties.
Cоздаем Properties-object: .
Класс Properties представляет постоянный набор свойств.
Свойства можно сохранить в поток или загрузить из потока.
Каждый ключ и соответствующее ему значение в списке свойств — это строка.

//в конструкции try..catch
inputStream присваиваем значение:
    inputStream = new FileInputStream("src/main/resources/database.properties");
     |
    inputStream = new Files.newInputStream(Paths.get("database.properties"));
Считываем data from  inputStream in  properties:  property.load(inputStream).
Получаем value: properties.getProperty("key").

Подключение к db
 Указываем путь к драйверу.
 Сlass.forName( properties.getProperty("driver")).getDeclaredConstructor().newInstance();

Класс DriverManager является уровнем управления JDBC,
отслеживает все доступные драйверы и управляет установлением соединений между БД и соответствующим драйвером.
Чтобы сказать диспетчеру драйверов JDBC, какой именно драйвер следует загрузить, необходимо выполнить одну из команд :
    Class.forName(“полное имя класса”)
    Class.forName(“полное имя класса”).newInstance()
    DriverManager.registerDriver(new “полное имя класса”)
Команды все равнозначны. Задача заключается в том, чтобы classloader загрузил нужный драйвер.
Устанавливать соединения с БД можно сразу после регистрации драйвера JDBC.
Для этого следует вызвать метод DriverManager.getConnection, которому передаются параметры соединения с БД.
DriverManager опрашивает каждый зарегистрированный драйвер с целью определения,
какой из них может установить данное соединение.
Может оказаться, что установить соединение согласно параметрам URL могут более одного драйвера JDBC.
В этом случае важен порядок, в котором происходит этот опрос, так как DriverManager будет использовать первый драйвер,
откликнувшийся на URL.

Создаем сееанс в конструкции try..catch:
 Connection connection = DriverManager.getConnection(url, user, password);

Работа с базой данных

Для взаимодействия с базой данных приложение отправляет серверу MySQL команды на языке SQL.
Чтобы выполнить команду, вначале необходимо создать объект Statement.
Для его создания у объекта Connection вызывается метод createStatement():
Statement statement = connection.createStatement();

Для выполнения команд SQL в классе Statement определено три метода:

executeUpdate:
    выполняет такие команды, как INSERT, UPDATE, DELETE, CREATE TABLE, DROP TABLE.
    В качестве результата возвращает количество строк, затронутых операцией
     (например, количество добавленных, измененных или удаленных строк),
    или 0, если ни одна строка не затронута операцией или если команда не изменяет содержимое таблицы
      (например, команда создания новой таблицы)
      В качестве параметра в него передается собственно команда SQL
      int executeUpdate("Команда_SQL")
      При этом если необходимо выполнить сразу несколько команд,
      то необязательно создавать новый объект Statement:

executeQuery:
    выполняет команду SELECT.
    Возвращает объект ResultSet, который содержит результаты запроса.

execute():
    выполняет любые команды и возвращает значение boolean:
    true - если команда возвращает набор строк (SELECT),
    иначе возвращается false.

PreparedStatement
этот класс позволяет подготовить запрос, отформатировать его должным образом
 Для создания объекта PreparedStatement применяется метод prepareStatement() класса Connection.
  В этот метод передается выражение sql INSERT INTO Products (ProductName, Price) Values (?, ?).
   Это выражение может содержать знаки вопроса ? - знаки подстановки, вместо которых будут вставляться реальные значения.
Чтобы связать отдельные знаки подстановки с конкретными значениями
 у класса PreparedStatement определен ряд методов для различных типов данных.
  Все методы, которые поставляют значения вместо знаков подстановки,
  в качестве первого параметра принимают порядковый номер знака подстановки (нумерация начинается с 1),
  а в качестве второго параметра - собственно значение, которое вставляется вместо знака подстановки.

   String requestSQL = "INSERT users(name, lastname, age) VALUES(?, ?, ?) ";
   PreparedStatement preparedStatement = connection.prepareStatement(requestSQL);
   preparedStatement.setString(1, name);
   preparedStatement.setString(2, lastName);
   preparedStatement.setByte(3, age);
   preparedStatement.executeUpdate();

Получение всех записей из таблицы
Запрос requestSQL = "SELECT * FROM users";
возвращает результат запроса в ResultSet
  Statement statement = connection.createStatement();
  ResultSet resultSet = statement.executeQuery(requestSQL);
Далее в цикле извлекаются поля записей
 while (resultSet.next()) {
         User user = new User();
         user.setId(resultSet.getLong("id"));
         user.setName(resultSet.getString("name"));
         user.setLastName(resultSet.getString("lastname"));
         user.setAge(resultSet.getByte("age"));
         users.add(user);
         System.out.println(user);
         }
 и присваиваются полям переменной User user.
 Переменная добавляется в структуру List<User> users.


удаление записи по Id
DELETE FROM имя_таблицы
[WHERE условие_удаления]